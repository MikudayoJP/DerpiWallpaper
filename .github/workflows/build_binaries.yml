on:
  push:
    branches:
    - main
  workflow_dispatch:
jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Install poetry
        run: |
          which python
          python -m pip install pipx
          python -m pipx install poetry
          which poetry
          python --version


      - name: Restore cached virtualenv
        uses: actions/cache/restore@v4
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}--${{ hashFiles('poetry.lock') }}
          path: .venv

      - name: Install Dependencies
        run: |
          poetry install --with dev
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

      - name: Check LongPathsEnabled
        if: matrix.os == 'windows-latest'
        run: |
            (Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled

      - name: Activate venv on Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo ".venv\Scripts" >> $GITHUB_PATH
          echo $Env:PATH
          dir ".venv\Scripts"
      - name: Activate venv on Linux/macOS
        if: matrix.os != 'windows-latest'
        run: echo ".venv/bin" >> $GITHUB_PATH


      - name: Saved cached virtualenv
        uses: actions/cache/save@v4
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}--${{ hashFiles('poetry.lock') }}
          path: .venv

      - name: Get Version from Poetry
        id: get_version
        run: echo "version=$(poetry version -s)" >> $GITHUB_ENV

      - name: show py
        run: |
          which python
          which poetry
          echo $PATH
          python --version

      - name: Build Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: derpiwallpaper/__main__.py
          onefile: true
          output-filename: DerpiWallpaper  # Base name for the output file
          output-dir: build                # Specify output directory
          enable-plugins: pyside6
          windows-console-mode: disable
          onefile-tempdir-spec: "{CACHE_DIR}/{PRODUCT}/{VERSION}"
          product-name: DerpiWallpaper
          product-version: ${{ env.version }}
          windows-icon-from-ico: "data/derpibooru.ico"
          include-data-files: "data/*=data/"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }} Build
          path: |
            build/*.exe
            build/*.bin
          include-hidden-files: true
